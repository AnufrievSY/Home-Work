"""
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:

a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;

b. написать 3 варианта кода (один у вас уже есть); проанализировать 3 варианта и выбрать оптимальный;

c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;

d. написать общий вывод: какой из трёх вариантов лучше и почему.
Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
а проявили творчество, фантазию и создали универсальный код для замера памяти.
"""
import cProfile
import sys
import timeit
import statistics


def size_of_memory(dct_vars):
    sum_size = 0
    for value in dct_vars.values():
        print(f'Константа "{value}" весит: {sys.getsizeof(value)}')
        sum_size += sys.getsizeof(value)
    print(f'Всего затрачено памяти: {sum_size}')


def task_v_1(a, b, c):  # Задание на нахождение среднего из трех чисел
    if a > b:
        if b > c:
            answer = f'Среднее число: {b}'
        else:
            if a > c:
                answer = f'Среднее число: {c}'
            else:
                answer = f'Среднее число: {a}'
    else:
        if c > b:
            answer = f'Среднее число: {b}'
        else:
            if a > c:
                answer = f'Среднее число: {a}'
            else:
                answer = f'Среднее число: {c}'


def task_v_2(a, b, c):
    lst = [a, b, c]
    answer = sorted(lst)[1]


def task_v_2_2(a, b, c):
    lst = (a, b, c)
    answer = sorted(lst)[1]


def task_v_3(a, b, c):
    answer = statistics.mean((a, b, c))

# Python: 3.9.7 (v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)]
# OS: ('64bit', 'Windows PowerShell')

# <function task_v_1> весит:                                136
# Константа "1" весит:                                      28
# Константа "3" весит:                                      28
# Константа "2" весит:                                      28
# Константа "Среднее число: 2" весит:                       106
# Всего затрачено памяти:                                   190
# timeit(number=1000):                                      0.0003862999999999922
# timeit(number=1000000):                                   0.3792687
# 1000004 function calls in                                 0.583 seconds

# <function task_v_2> весит:                                136
# Константа "1" весит:                                      28
# Константа "3" весит:                                      28
# Константа "2" весит:                                      28
# Константа "[1, 3, 2]" весит:                              80
# Константа "2" весит:                                      28
# Всего затрачено памяти:                                   192
# timeit(number=1000):                                      0.0003867000000000037
# timeit(number=1000000):                                   0.3803948
# task_v_2(1, 3, 2) 2000004 function calls in               0.793 seconds

# <function task_v_2_2 at 0x000001BABC7B9C10> весит:        136
# Константа "1" весит:                                      28
# Константа "3" весит:                                      28
# Константа "2" весит:                                      28
# Константа "(1, 3, 2)" весит:                              64
# Константа "2" весит:                                      28
# Всего затрачено памяти:                                   176
# timeit(number=1000):                                      0.0003803000000000001
# timeit(number=1000000):                                   0.3796582
# task_v_2_2(1, 3, 2) 2000004 function calls in             0.782 seconds

# <function task_v_3 at 0x00000205DDD2A5E0> весит:          136
# Константа "1" весит:                                      28
# Константа "3" весит:                                      28
# Константа "2" весит:                                      28
# Константа "2" весит:                                      28
# Всего затрачено памяти:                                   112
# timeit(number=1000):                                      0.0004019999999999857
# timeit(number=1000000):                                   0.38650450000000003
# task_v_3(1, 3, 2) 44000008 function calls in              19.678 seconds

# Выводы:
# Самый затратный, как по времени, так и затраченной памяти task_v_2
# Меньше всего тратит памяти task_v_3  однако он тратит больше времени
# task_v_2_2 тратит несколько больше памяти, однако он справляется быстрее всех при небольщом колличестве операций
# При увеличении колличества операций лучшим вариантом скрипта остается изначал



